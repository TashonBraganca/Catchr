{"version":3,"file":"SimpleVoiceCapture-DwlCgo9q.js","sources":["../../src/components/capture/SimpleVoiceCapture.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\n// SIMPLE VOICE CAPTURE - APPLE NOTES + GOOGLE KEEP INSPIRED\n// Flow: Web Speech API → Whisper Fallback → GPT-5-mini → Save to Notes\n\ninterface SimpleVoiceCaptureProps {\n  onTranscriptComplete?: (transcript: string, suggestedTitle?: string, suggestedTags?: string[]) => void;\n  onError?: (error: string) => void;\n  className?: string;\n}\n\nexport const SimpleVoiceCapture: React.FC<SimpleVoiceCaptureProps> = ({\n  onTranscriptComplete,\n  onError,\n  className\n}) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [audioLevel, setAudioLevel] = useState(0);\n\n  // Enhanced state for Reddit-inspired feedback (Google Keep insights)\n  const [confidence, setConfidence] = useState(0);\n  const [wordCount, setWordCount] = useState(0);\n  const [processingStage, setProcessingStage] = useState<'listening' | 'transcribing' | 'processing' | 'completed'>('listening');\n  const [showAdvancedStats, setShowAdvancedStats] = useState(false); // Progressive disclosure\n  const [realtimeWords, setRealtimeWords] = useState<string[]>([]); // \"Words as you speak\" tracking\n\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const recognitionRef = useRef<SpeechRecognition | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number>();\n\n  // Initialize Web Speech API\n  const initSpeechRecognition = useCallback(() => {\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n\n      recognition.onresult = (event) => {\n        let finalTranscript = '';\n        let totalConfidence = 0;\n        let resultCount = 0;\n\n        // Process both interim and final results for real-time feedback\n        let interimTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript;\n            totalConfidence += event.results[i][0].confidence || 0.8; // Fallback confidence\n            resultCount++;\n          } else {\n            // Show interim results for \"words as you speak\" experience\n            interimTranscript += event.results[i][0].transcript;\n          }\n        }\n\n        // Update real-time words array for enhanced visualization\n        const currentText = finalTranscript + interimTranscript;\n        if (currentText) {\n          const words = currentText.split(' ').filter(word => word.length > 0);\n          setRealtimeWords(words);\n        }\n\n        if (finalTranscript) {\n          const newText = finalTranscript;\n          setTranscript(prev => prev + newText);\n          setWordCount(prev => prev + newText.split(' ').filter(word => word.length > 0).length);\n\n          // Enhanced confidence tracking (Reddit insight: visual feedback builds trust)\n          if (resultCount > 0) {\n            setConfidence(totalConfidence / resultCount);\n            // Auto-show advanced stats if confidence is concerning\n            if (totalConfidence / resultCount < 0.6) {\n              setShowAdvancedStats(true);\n            }\n          }\n        }\n      };\n\n      recognition.onerror = (event) => {\n        console.warn('Speech recognition error:', event.error);\n        // Fall back to audio recording for Whisper\n      };\n\n      return recognition;\n    }\n    return null;\n  }, []);\n\n  // Audio level monitoring\n  const monitorAudioLevel = useCallback(() => {\n    if (!analyserRef.current) return;\n\n    const analyser = analyserRef.current;\n    const dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n    const updateLevel = () => {\n      analyser.getByteFrequencyData(dataArray);\n      const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;\n      setAudioLevel(average / 255);\n\n      if (isRecording) {\n        animationFrameRef.current = requestAnimationFrame(updateLevel);\n      }\n    };\n\n    updateLevel();\n  }, [isRecording]);\n\n  // Start recording\n  const startRecording = useCallback(async () => {\n    try {\n      setIsRecording(true);\n      setTranscript('');\n      audioChunksRef.current = [];\n\n      // Get microphone access\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n\n      // Setup audio analysis for visual feedback\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      source.connect(analyser);\n\n      audioContextRef.current = audioContext;\n      analyserRef.current = analyser;\n      monitorAudioLevel();\n\n      // Try Web Speech API first (Google Keep style)\n      const recognition = initSpeechRecognition();\n      if (recognition) {\n        recognitionRef.current = recognition;\n        recognition.start();\n      }\n\n      // Always record audio as fallback (Whisper backup)\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.start(100); // Collect data every 100ms\n\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      onError?.('Failed to access microphone');\n      setIsRecording(false);\n    }\n  }, [initSpeechRecognition, monitorAudioLevel, onError]);\n\n  // Stop recording and process\n  const stopRecording = useCallback(async () => {\n    setIsRecording(false);\n    setIsProcessing(true);\n\n    // Stop all recording\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n    }\n\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n\n    // Process the recording with enhanced stages (Reddit insight: Google Keep processing feedback)\n    try {\n      setProcessingStage('transcribing');\n      let finalTranscript = transcript;\n\n      // If Web Speech API didn't work or gave poor results, use Whisper\n      if (!finalTranscript || finalTranscript.length < 10) {\n        if (audioChunksRef.current.length > 0) {\n          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n          finalTranscript = await transcribeWithWhisper(audioBlob);\n        }\n      }\n\n      if (finalTranscript && finalTranscript.length > 0) {\n        setProcessingStage('processing');\n        // Use GPT-5-mini for categorization and enhancement\n        const aiResult = await processWithGPT(finalTranscript);\n\n        onTranscriptComplete?.(\n          finalTranscript,\n          aiResult.suggestedTitle,\n          aiResult.suggestedTags\n        );\n      } else {\n        onError?.('No speech detected');\n      }\n\n    } catch (error) {\n      console.error('Error processing recording:', error);\n      onError?.('Failed to process recording');\n    } finally {\n      setIsProcessing(false);\n      setTranscript('');\n      setAudioLevel(0);\n      setConfidence(0);\n      setWordCount(0);\n      setProcessingStage('completed');\n    }\n  }, [transcript, onTranscriptComplete, onError]);\n\n  // Whisper transcription fallback\n  const transcribeWithWhisper = async (audioBlob: Blob): Promise<string> => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.webm');\n\n    const response = await fetch('/api/voice/transcribe', {\n      method: 'POST',\n      body: formData\n    });\n\n    if (!response.ok) {\n      throw new Error('Whisper transcription failed');\n    }\n\n    const result = await response.json();\n    return result.transcript || '';\n  };\n\n  // GPT-5-mini processing for categorization\n  const processWithGPT = async (transcript: string) => {\n    const response = await fetch('/api/voice/categorize', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ transcript })\n    });\n\n    if (!response.ok) {\n      throw new Error('GPT processing failed');\n    }\n\n    return await response.json();\n  };\n\n  // Enhanced waveform visualization (Research insight: more responsive and polished)\n  const WaveformBars = () => {\n    // Create more natural waveform pattern based on actual audio levels\n    const barHeights = Array.from({ length: 12 }, (_, i) => {\n      if (!isRecording) return 4;\n\n      // Create more natural wave pattern without Math.random()\n      const baseHeight = audioLevel * 40;\n      const waveOffset = Math.sin((Date.now() * 0.005) + (i * 0.5)) * 8;\n      const barVariation = [1, 0.8, 1.2, 0.9, 1.1, 0.7, 1.3, 0.8, 1.1, 0.9, 1.2, 0.8][i];\n\n      return Math.max(4, baseHeight * barVariation + waveOffset);\n    });\n\n    return (\n      <div className=\"flex items-center space-x-1\">\n        {barHeights.map((height, i) => (\n          <motion.div\n            key={i}\n            className={cn(\n              \"w-1 rounded-full transition-colors duration-200\",\n              // Confidence-based color coding (Reddit insight: visual trust indicators)\n              confidence > 0.8 ? \"bg-green-500\" :\n              confidence > 0.6 ? \"bg-[#007aff]\" :\n              confidence > 0 ? \"bg-yellow-500\" : \"bg-[#007aff]\"\n            )}\n            animate={{ height }}\n            transition={{\n              duration: 0.1,\n              ease: \"easeOut\"\n            }}\n            style={{ height: Math.round(height) }}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <motion.div\n      className={cn(\n        \"flex flex-col items-center space-y-4 p-6 bg-white rounded-2xl border border-[#e5e5e7]\",\n        \"shadow-sm\",\n        className\n      )}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: 20 }}\n    >\n      {/* Recording Button */}\n      <motion.button\n        data-testid=\"voice-record-button\"\n        aria-label={isRecording ? \"Stop recording\" : \"Start recording\"}\n        className={cn(\n          \"relative w-20 h-20 rounded-full border-4 transition-all duration-200\",\n          \"flex items-center justify-center\",\n          isRecording\n            ? \"bg-[#ff3b30] border-[#ff3b30] text-white\"\n            : \"bg-white border-[#007aff] text-[#007aff] hover:bg-[#007aff]/5\",\n          isProcessing && \"opacity-50 cursor-not-allowed\"\n        )}\n        onClick={isRecording ? stopRecording : startRecording}\n        disabled={isProcessing}\n        whileTap={{ scale: 0.95 }}\n        whileHover={{ scale: isProcessing ? 1 : 1.05 }}\n      >\n        <AnimatePresence mode=\"wait\">\n          {isProcessing ? (\n            <motion.div\n              className=\"w-6 h-6 border-2 border-current border-t-transparent rounded-full animate-spin\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n            />\n          ) : isRecording ? (\n            <motion.div\n              className=\"w-6 h-6 bg-white rounded-sm\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n            />\n          ) : (\n            <motion.svg\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n            >\n              <path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"/>\n              <path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"/>\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"/>\n              <line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"/>\n            </motion.svg>\n          )}\n        </AnimatePresence>\n      </motion.button>\n\n      {/* Status Text */}\n      <div className=\"text-center\">\n        <motion.p\n          data-testid=\"voice-status\"\n          className=\"text-lg font-medium text-[#1d1d1f]\"\n          animate={{ scale: isRecording ? 1.05 : 1 }}\n        >\n          {isProcessing\n            ? processingStage === 'transcribing' ? 'Transcribing...' :\n              processingStage === 'processing' ? 'Processing with AI...' : 'Processing...'\n            : isRecording\n              ? 'Recording...'\n              : 'Tap to record'\n          }\n        </motion.p>\n        <div className=\"text-sm text-[#8e8e93] mt-1 space-y-1\">\n          <p>\n            {isProcessing\n              ? processingStage === 'transcribing' ? 'Converting speech to text with Whisper AI' :\n                processingStage === 'processing' ? 'Analyzing content with GPT-5-mini' :\n                'Processing audio...'\n              : isRecording\n                ? 'Speak naturally - I\\'m listening'\n                : 'Tap to start voice capture'\n            }\n          </p>\n\n          {/* Enhanced real-time stats (Reddit insight: instant feedback builds trust) */}\n          {(isRecording && realtimeWords.length > 0) && (\n            <motion.div\n              className=\"space-y-2\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n            >\n              {/* Primary stats always visible */}\n              <div className=\"flex items-center justify-center space-x-4 text-xs\">\n                <span className=\"flex items-center space-x-1\">\n                  <span>📝</span>\n                  <span>{realtimeWords.length} words</span>\n                </span>\n                {confidence > 0 && (\n                  <motion.span\n                    className={cn(\n                      \"flex items-center space-x-1 px-2 py-1 rounded-full\",\n                      confidence > 0.8 ? \"bg-green-100 text-green-700\" :\n                      confidence > 0.6 ? \"bg-blue-100 text-blue-700\" : \"bg-yellow-100 text-yellow-700\"\n                    )}\n                    animate={{ scale: confidence < 0.6 ? [1, 1.05, 1] : 1 }}\n                    transition={{ duration: 0.5, repeat: confidence < 0.6 ? Infinity : 0 }}\n                  >\n                    <span>{confidence > 0.8 ? '🟢' : confidence > 0.6 ? '🔵' : '🟡'}</span>\n                    <span>{Math.round(confidence * 100)}%</span>\n                  </motion.span>\n                )}\n\n                {/* Progressive disclosure toggle */}\n                <button\n                  onClick={() => setShowAdvancedStats(!showAdvancedStats)}\n                  className=\"text-[#007aff] hover:text-[#0051d5] transition-colors\"\n                  aria-label=\"Toggle advanced statistics\"\n                >\n                  {showAdvancedStats ? '📊 Less' : '📈 More'}\n                </button>\n              </div>\n\n              {/* Advanced stats with progressive disclosure */}\n              <AnimatePresence>\n                {showAdvancedStats && (\n                  <motion.div\n                    className=\"flex items-center justify-center space-x-3 text-xs text-[#8e8e93] p-2 bg-[#f8f9fa] rounded-lg\"\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: 'auto' }}\n                    exit={{ opacity: 0, height: 0 }}\n                  >\n                    <span>⏱️ {Math.floor(realtimeWords.length / 2.5)}/min</span>\n                    <span>🎚️ {Math.round(audioLevel * 100)}% level</span>\n                    <span>🧠 {processingStage}</span>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.div>\n          )}\n        </div>\n      </div>\n\n      {/* Waveform Visualization */}\n      <AnimatePresence>\n        {(isRecording || isProcessing) && (\n          <motion.div\n            className=\"flex items-center justify-center h-8\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n          >\n            <WaveformBars />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Enhanced Live Transcript Preview (Reddit insight: Google Keep real-time feedback) */}\n      <AnimatePresence>\n        {transcript && isRecording && (\n          <motion.div\n            className=\"w-full max-w-md p-4 liquid-glass liquid-glass--rounded-lg\"\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm font-medium text-[#007aff]\">🎤 Live transcript</p>\n              {confidence > 0 && (\n                <div className={cn(\n                  \"flex items-center space-x-1 text-xs px-2 py-1 rounded-full\",\n                  confidence > 0.8 ? \"bg-green-100 text-green-700\" :\n                  confidence > 0.6 ? \"bg-yellow-100 text-yellow-700\" :\n                  \"bg-red-100 text-red-700\"\n                )}>\n                  <span>{confidence > 0.8 ? '🟢' : confidence > 0.6 ? '🟡' : '🔴'}</span>\n                  <span>{Math.round(confidence * 100)}%</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"text-sm text-[#1d1d1f] leading-relaxed mb-2\">\n              {/* Show real-time words with typing effect (Reddit insight: words as you speak) */}\n              {realtimeWords.map((word, index) => (\n                <motion.span\n                  key={`${word}-${index}`}\n                  className={cn(\n                    \"inline-block mr-1\",\n                    // Highlight recent words (last 3) for real-time feedback\n                    index >= realtimeWords.length - 3 ? \"text-[#007aff] font-medium\" : \"\"\n                  )}\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.2, delay: index * 0.05 }}\n                >\n                  {word}\n                </motion.span>\n              ))}\n              <motion.span\n                className=\"inline-block w-0.5 h-4 bg-[#007aff] ml-1\"\n                animate={{ opacity: [1, 0, 1] }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between text-xs text-[#8e8e93] pt-2 border-t border-[#e5e5e7]\">\n              <span>{wordCount} words captured</span>\n              <span>Auto-saving in 1s</span>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n\nexport default SimpleVoiceCapture;"],"names":["SimpleVoiceCapture","onTranscriptComplete","onError","className","isRecording","setIsRecording","useState","isProcessing","setIsProcessing","transcript","setTranscript","audioLevel","setAudioLevel","confidence","setConfidence","wordCount","setWordCount","processingStage","setProcessingStage","showAdvancedStats","setShowAdvancedStats","realtimeWords","setRealtimeWords","mediaRecorderRef","useRef","recognitionRef","audioChunksRef","audioContextRef","analyserRef","animationFrameRef","initSpeechRecognition","useCallback","SpeechRecognition","recognition","event","finalTranscript","totalConfidence","resultCount","interimTranscript","i","currentText","words","word","newText","prev","monitorAudioLevel","analyser","dataArray","updateLevel","average","sum","value","startRecording","stream","audioContext","source","mediaRecorder","error","stopRecording","audioBlob","transcribeWithWhisper","aiResult","processWithGPT","formData","response","WaveformBars","barHeights","_","baseHeight","waveOffset","barVariation","jsx","height","motion","cn","jsxs","AnimatePresence","index"],"mappings":"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"}