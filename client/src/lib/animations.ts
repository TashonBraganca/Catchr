import { Variants, Transition } from 'framer-motion';

// Animation Utilities for Cathcr - Steve Jobs-level Polish\n// Comprehensive animation system with performance optimization\n\n// ========================================\n// TIMING & EASING CONSTANTS\n// ========================================\n\nexport const TIMING = {\n  // Ultra-fast for zero-friction interactions\n  instant: 0.05,\n  lightning: 0.1,\n  fast: 0.15,\n  \n  // Standard interactions\n  quick: 0.2,\n  medium: 0.3,\n  standard: 0.4,\n  \n  // Slower, more dramatic\n  slow: 0.6,\n  dramatic: 0.8,\n  epic: 1.2,\n} as const;\n\nexport const EASING = {\n  // Apple-style easings\n  apple: [0.4, 0, 0.2, 1],\n  appleIn: [0.4, 0, 1, 1],\n  appleOut: [0, 0, 0.2, 1],\n  \n  // Custom easings for glass effects\n  glass: [0.25, 0.46, 0.45, 0.94],\n  bounce: [0.68, -0.55, 0.265, 1.55],\n  elastic: [0.175, 0.885, 0.32, 1.275],\n  \n  // Performance optimized\n  linear: [0, 0, 1, 1],\n} as const;\n\n// ========================================\n// SPRING CONFIGURATIONS\n// ========================================\n\nexport const SPRINGS = {\n  // Zero-friction springs for instant interactions\n  instant: { stiffness: 500, damping: 30, mass: 0.8 },\n  lightning: { stiffness: 400, damping: 25, mass: 0.9 },\n  \n  // Standard springs\n  snappy: { stiffness: 300, damping: 20, mass: 1 },\n  smooth: { stiffness: 200, damping: 25, mass: 1 },\n  gentle: { stiffness: 100, damping: 15, mass: 1 },\n  \n  // Special effects\n  wobbly: { stiffness: 180, damping: 12, mass: 1 },\n  bouncy: { stiffness: 400, damping: 10, mass: 1.2 },\n} as const;\n\n// ========================================\n// ENTRANCE ANIMATIONS\n// ========================================\n\nexport const entranceAnimations = {\n  // Fade entrance\n  fadeIn: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n    transition: { duration: TIMING.medium, ease: EASING.apple }\n  },\n\n  // Scale entrance (glass effect)\n  scaleIn: {\n    initial: { opacity: 0, scale: 0.92 },\n    animate: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.92 },\n    transition: { duration: TIMING.quick, ease: EASING.glass }\n  },\n\n  // Slide from bottom (mobile-friendly)\n  slideUp: {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: 20 },\n    transition: { duration: TIMING.quick, ease: EASING.apple }\n  },\n\n  // Slide from right\n  slideInRight: {\n    initial: { opacity: 0, x: 30 },\n    animate: { opacity: 1, x: 0 },\n    exit: { opacity: 0, x: 30 },\n    transition: { duration: TIMING.quick, ease: EASING.apple }\n  },\n\n  // Glass emergence (backdrop blur effect)\n  glassEmerge: {\n    initial: { \n      opacity: 0, \n      scale: 0.95, \n      backdropFilter: 'blur(0px)' \n    },\n    animate: { \n      opacity: 1, \n      scale: 1, \n      backdropFilter: 'blur(16px) saturate(180%) brightness(1.1)' \n    },\n    exit: { \n      opacity: 0, \n      scale: 0.95, \n      backdropFilter: 'blur(0px)' \n    },\n    transition: { duration: TIMING.medium, ease: EASING.glass }\n  },\n\n  // Orange glow entrance\n  orangeGlow: {\n    initial: { \n      opacity: 0, \n      scale: 0.9,\n      boxShadow: '0 0 0 rgba(255, 165, 0, 0)'\n    },\n    animate: { \n      opacity: 1, \n      scale: 1,\n      boxShadow: '0 0 32px rgba(255, 165, 0, 0.35)'\n    },\n    exit: { \n      opacity: 0, \n      scale: 0.9,\n      boxShadow: '0 0 0 rgba(255, 165, 0, 0)'\n    },\n    transition: { duration: TIMING.standard, ease: EASING.bounce }\n  },\n} as const;\n\n// ========================================\n// HOVER INTERACTIONS\n// ========================================\n\nexport const hoverAnimations = {\n  // Standard glass hover\n  glassHover: {\n    scale: 1.02,\n    y: -2,\n    transition: { duration: TIMING.fast, ease: EASING.apple }\n  },\n\n  // Button hover with glow\n  buttonHover: {\n    scale: 1.02,\n    y: -1,\n    boxShadow: '0 8px 32px rgba(255, 165, 0, 0.25)',\n    transition: { duration: TIMING.lightning, ease: EASING.apple }\n  },\n\n  // Card hover with glass intensification\n  cardHover: {\n    scale: 1.02,\n    y: -4,\n    backdropFilter: 'blur(24px) saturate(200%) brightness(1.15)',\n    boxShadow: '0 16px 48px rgba(255, 165, 0, 0.2)',\n    transition: { duration: TIMING.quick, ease: EASING.glass }\n  },\n\n  // Icon hover with bounce\n  iconHover: {\n    scale: 1.15,\n    rotate: 5,\n    transition: { duration: TIMING.lightning, ease: EASING.bounce }\n  },\n\n  // Neon glow hover\n  neonHover: {\n    scale: 1.05,\n    boxShadow: '0 0 48px rgba(255, 127, 0, 0.6), 0 0 96px rgba(255, 140, 0, 0.3)',\n    textShadow: '0 0 20px rgba(255, 165, 0, 1)',\n    transition: { duration: TIMING.quick, ease: EASING.elastic }\n  },\n};\n\nexport const tapAnimations = {\n  // Standard tap\n  tap: {\n    scale: 0.98,\n    transition: { duration: TIMING.instant, ease: EASING.linear }\n  },\n\n  // Gentle tap for glass elements\n  glassTap: {\n    scale: 0.96,\n    transition: { duration: TIMING.lightning, ease: EASING.apple }\n  },\n\n  // Button press with depth\n  buttonTap: {\n    scale: 0.95,\n    y: 1,\n    boxShadow: '0 4px 12px rgba(255, 165, 0, 0.15)',\n    transition: { duration: TIMING.instant, ease: EASING.linear }\n  },\n};\n\n// ========================================\n// STAGGER ANIMATIONS\n// ========================================\n\nexport const createStaggerAnimation = ({\n  staggerDelay = 0.1,\n  animationType = 'slideUp'\n} = {}) => {\n  const baseAnimation = entranceAnimations[animationType as keyof typeof entranceAnimations];\n  \n  return {\n    ...baseAnimation,\n    transition: {\n      ...baseAnimation.transition,\n      staggerChildren: staggerDelay,\n      delayChildren: 0.1\n    }\n  };\n};\n\nexport const staggerVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n      delayChildren: 0.2\n    }\n  }\n};\n\nexport const staggerItemVariants: Variants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { duration: TIMING.quick, ease: EASING.apple }\n  }\n};\n\n// ========================================\n// LOADING ANIMATIONS\n// ========================================\n\nexport const loadingAnimations = {\n  // Spinner with orange glow\n  orangeSpinner: {\n    animate: {\n      rotate: 360,\n      boxShadow: [\n        '0 0 20px rgba(255, 165, 0, 0.3)',\n        '0 0 40px rgba(255, 165, 0, 0.6)',\n        '0 0 20px rgba(255, 165, 0, 0.3)'\n      ]\n    },\n    transition: {\n      rotate: {\n        duration: 1,\n        repeat: Infinity,\n        ease: 'linear'\n      },\n      boxShadow: {\n        duration: 2,\n        repeat: Infinity,\n        ease: 'easeInOut'\n      }\n    }\n  },\n\n  // Pulse loading\n  pulse: {\n    animate: {\n      opacity: [0.5, 1, 0.5],\n      scale: [1, 1.05, 1]\n    },\n    transition: {\n      duration: 2,\n      repeat: Infinity,\n      ease: 'easeInOut'\n    }\n  },\n\n  // Breathing effect\n  breathing: {\n    animate: {\n      scale: [1, 1.02, 1],\n      backdropFilter: [\n        'blur(16px) saturate(180%)',\n        'blur(20px) saturate(200%)',\n        'blur(16px) saturate(180%)'\n      ]\n    },\n    transition: {\n      duration: 3,\n      repeat: Infinity,\n      ease: 'easeInOut'\n    }\n  },\n\n  // Skeleton loading with orange tint\n  skeleton: {\n    animate: {\n      backgroundPosition: ['200% 0', '-200% 0']\n    },\n    transition: {\n      duration: 2,\n      repeat: Infinity,\n      ease: 'linear'\n    },\n    style: {\n      background: `linear-gradient(\n        90deg,\n        rgba(255, 165, 0, 0.05) 0%,\n        rgba(255, 165, 0, 0.15) 50%,\n        rgba(255, 165, 0, 0.05) 100%\n      )`,\n      backgroundSize: '200% 100%'\n    }\n  }\n};\n\n// ========================================\n// SCROLL-BASED ANIMATIONS\n// ========================================\n\nexport const scrollAnimations = {\n  // Fade in on scroll\n  fadeInOnScroll: {\n    initial: { opacity: 0, y: 30 },\n    whileInView: { \n      opacity: 1, \n      y: 0,\n      transition: { duration: TIMING.medium, ease: EASING.apple }\n    },\n    viewport: { once: true, margin: '-50px' }\n  },\n\n  // Scale in on scroll\n  scaleInOnScroll: {\n    initial: { opacity: 0, scale: 0.8 },\n    whileInView: { \n      opacity: 1, \n      scale: 1,\n      transition: { duration: TIMING.standard, ease: EASING.bounce }\n    },\n    viewport: { once: true, margin: '-100px' }\n  },\n\n  // Glass reveal on scroll\n  glassRevealOnScroll: {\n    initial: { \n      opacity: 0, \n      scale: 0.95,\n      backdropFilter: 'blur(0px)'\n    },\n    whileInView: { \n      opacity: 1, \n      scale: 1,\n      backdropFilter: 'blur(16px) saturate(180%) brightness(1.1)',\n      transition: { duration: TIMING.standard, ease: EASING.glass }\n    },\n    viewport: { once: true, margin: '-75px' }\n  }\n};\n\n// ========================================\n// MODAL ANIMATIONS\n// ========================================\n\nexport const modalAnimations = {\n  // Zero-friction modal (<100ms goal)\n  instantModal: {\n    overlay: {\n      initial: { opacity: 0, backdropFilter: 'blur(0px)' },\n      animate: { \n        opacity: 1, \n        backdropFilter: 'blur(24px)',\n        transition: { duration: TIMING.lightning, ease: EASING.linear }\n      },\n      exit: { \n        opacity: 0, \n        backdropFilter: 'blur(0px)',\n        transition: { duration: TIMING.instant, ease: EASING.linear }\n      }\n    },\n    content: {\n      initial: { opacity: 0, scale: 0.92, y: '-50%', x: '-50%' },\n      animate: { \n        opacity: 1, \n        scale: 1, \n        y: '-50%', \n        x: '-50%',\n        transition: { \n          duration: TIMING.lightning, \n          ease: EASING.apple,\n          type: 'spring',\n          ...SPRINGS.lightning\n        }\n      },\n      exit: { \n        opacity: 0, \n        scale: 0.92, \n        y: '-50%', \n        x: '-50%',\n        transition: { duration: TIMING.instant, ease: EASING.linear }\n      }\n    }\n  },\n\n  // Premium modal with glass effects\n  premiumModal: {\n    overlay: {\n      initial: { opacity: 0, backdropFilter: 'blur(0px)' },\n      animate: { \n        opacity: 1, \n        backdropFilter: 'blur(32px) saturate(150%)',\n        transition: { duration: TIMING.medium, ease: EASING.glass }\n      },\n      exit: { \n        opacity: 0, \n        backdropFilter: 'blur(0px)',\n        transition: { duration: TIMING.quick, ease: EASING.apple }\n      }\n    },\n    content: {\n      initial: { \n        opacity: 0, \n        scale: 0.9, \n        y: '-50%', \n        x: '-50%',\n        backdropFilter: 'blur(0px)'\n      },\n      animate: { \n        opacity: 1, \n        scale: 1, \n        y: '-50%', \n        x: '-50%',\n        backdropFilter: 'blur(20px) saturate(180%) brightness(1.1)',\n        transition: { \n          duration: TIMING.standard, \n          ease: EASING.glass,\n          type: 'spring',\n          ...SPRINGS.smooth\n        }\n      },\n      exit: { \n        opacity: 0, \n        scale: 0.9, \n        y: '-50%', \n        x: '-50%',\n        backdropFilter: 'blur(0px)',\n        transition: { duration: TIMING.quick, ease: EASING.apple }\n      }\n    }\n  }\n};\n\n// ========================================\n// PERFORMANCE OPTIMIZATION\n// ========================================\n\nexport const performanceProps = {\n  // GPU acceleration\n  willChange: {\n    willChange: 'transform, opacity, backdrop-filter'\n  },\n\n  // Layer promotion\n  layerPromote: {\n    transform: 'translateZ(0)',\n    backfaceVisibility: 'hidden' as const,\n    perspective: 1000\n  },\n\n  // Optimized transforms\n  optimizedTransform: {\n    transformOrigin: 'center center',\n    transformStyle: 'preserve-3d' as const\n  }\n};\n\n// ========================================\n// UTILITY FUNCTIONS\n// ========================================\n\n/**\n * Create a staggered animation for lists\n * @param delay - Delay between each item\n * @param animation - Base animation to use\n */\nexport const createStagger = (delay: number = 0.1, animation = entranceAnimations.slideUp) => ({\n  container: {\n    ...animation,\n    transition: {\n      ...animation.transition,\n      staggerChildren: delay,\n      delayChildren: 0.1\n    }\n  },\n  item: animation\n});\n\n/**\n * Create a hover animation with custom properties\n * @param scale - Scale factor\n * @param y - Y offset\n * @param duration - Animation duration\n */\nexport const createHover = ({\n  scale = 1.02,\n  y = -2,\n  duration = TIMING.fast,\n  glow = false\n} = {}) => ({\n  scale,\n  y,\n  ...(glow && {\n    boxShadow: '0 8px 32px rgba(255, 165, 0, 0.25)',\n    backdropFilter: 'blur(20px) saturate(200%) brightness(1.15)'\n  }),\n  transition: { duration, ease: EASING.apple }\n});\n\n/**\n * Create a tap animation with custom scale\n * @param scale - Scale factor during tap\n * @param duration - Animation duration\n */\nexport const createTap = (scale: number = 0.98, duration: number = TIMING.instant) => ({\n  scale,\n  transition: { duration, ease: EASING.linear }\n});\n\n/**\n * Performance-optimized glass animation\n * @param variant - Glass variant intensity\n */\nexport const createGlassAnimation = (variant: 'light' | 'medium' | 'strong' = 'medium') => {\n  const blurValues = {\n    light: 'blur(8px) saturate(160%)',\n    medium: 'blur(16px) saturate(180%) brightness(1.1)',\n    strong: 'blur(24px) saturate(200%) brightness(1.15)'\n  };\n\n  return {\n    initial: { \n      opacity: 0, \n      scale: 0.95,\n      backdropFilter: 'blur(0px)'\n    },\n    animate: { \n      opacity: 1, \n      scale: 1,\n      backdropFilter: blurValues[variant]\n    },\n    exit: { \n      opacity: 0, \n      scale: 0.95,\n      backdropFilter: 'blur(0px)'\n    },\n    transition: { \n      duration: TIMING.quick, \n      ease: EASING.glass,\n      type: 'spring',\n      ...SPRINGS.smooth\n    }\n  };\n};\n\nexport default {\n  TIMING,\n  EASING,\n  SPRINGS,\n  entranceAnimations,\n  hoverAnimations,\n  tapAnimations,\n  loadingAnimations,\n  scrollAnimations,\n  modalAnimations,\n  performanceProps,\n  createStagger,\n  createHover,\n  createTap,\n  createGlassAnimation\n};