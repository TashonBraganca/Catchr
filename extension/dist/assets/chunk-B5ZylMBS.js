import"./chunk-B5Qt9EMX.js";import{b as n}from"./chunk-BYVbgdLO.js";class i{constructor(){this.settings={syncEnabled:!0,autoCapture:!0,notifications:!0,analyticsEnabled:!1},this.elements={syncEnabled:document.getElementById("syncEnabled"),autoCapture:document.getElementById("autoCapture"),notifications:document.getElementById("notifications"),analyticsEnabled:document.getElementById("analyticsEnabled"),versionInfo:document.getElementById("versionInfo"),storageStats:document.getElementById("storageStats"),accountStatus:document.getElementById("accountStatus"),openShortcutsBtn:document.getElementById("openShortcutsBtn"),exportDataBtn:document.getElementById("exportDataBtn"),cleanupBtn:document.getElementById("cleanupBtn"),clearAllBtn:document.getElementById("clearAllBtn"),connectAccountBtn:document.getElementById("connectAccountBtn"),openDashboardBtn:document.getElementById("openDashboardBtn"),resetSettingsBtn:document.getElementById("resetSettingsBtn"),modalOverlay:document.getElementById("modalOverlay"),modalTitle:document.getElementById("modalTitle"),modalMessage:document.getElementById("modalMessage"),modalCancel:document.getElementById("modalCancel"),modalConfirm:document.getElementById("modalConfirm"),toastContainer:document.getElementById("toastContainer")},this.initialize()}async initialize(){try{await this.loadSettings(),this.setupEventListeners(),await this.loadVersionInfo(),await this.loadStorageStats(),await this.loadAccountStatus(),console.log("✅ Options page initialized")}catch(t){console.error("❌ Failed to initialize options:",t),this.showToast("Failed to load settings","error")}}setupEventListeners(){this.elements.syncEnabled.addEventListener("change",this.handleSettingChange.bind(this)),this.elements.autoCapture.addEventListener("change",this.handleSettingChange.bind(this)),this.elements.notifications.addEventListener("change",this.handleSettingChange.bind(this)),this.elements.analyticsEnabled.addEventListener("change",this.handleSettingChange.bind(this)),this.elements.openShortcutsBtn.addEventListener("click",this.handleOpenShortcuts.bind(this)),this.elements.exportDataBtn.addEventListener("click",this.handleExportData.bind(this)),this.elements.cleanupBtn.addEventListener("click",this.handleCleanup.bind(this)),this.elements.clearAllBtn.addEventListener("click",this.handleClearAll.bind(this)),this.elements.connectAccountBtn.addEventListener("click",this.handleConnectAccount.bind(this)),this.elements.openDashboardBtn.addEventListener("click",this.handleOpenDashboard.bind(this)),this.elements.resetSettingsBtn.addEventListener("click",this.handleResetSettings.bind(this)),this.elements.modalCancel.addEventListener("click",this.hideModal.bind(this)),this.elements.modalOverlay.addEventListener("click",t=>{t.target===this.elements.modalOverlay&&this.hideModal()})}async loadSettings(){try{const t=await n.runtime.sendMessage({type:"GET_STORAGE"});t.userSettings&&(this.settings={...this.settings,...t.userSettings}),this.elements.syncEnabled.checked=this.settings.syncEnabled,this.elements.autoCapture.checked=this.settings.autoCapture,this.elements.notifications.checked=this.settings.notifications,this.elements.analyticsEnabled.checked=this.settings.analyticsEnabled}catch(t){console.error("Failed to load settings:",t)}}async saveSettings(){try{await n.runtime.sendMessage({type:"UPDATE_SETTINGS",payload:this.settings}),this.showToast("Settings saved successfully","success")}catch(t){console.error("Failed to save settings:",t),this.showToast("Failed to save settings","error")}}async handleSettingChange(t){const s=t.target,e=s.id;this.settings[e]=s.checked,await this.saveSettings()}async loadVersionInfo(){try{const t=n.runtime.getManifest();this.elements.versionInfo.innerHTML=`
        <div class="version-badge">
          <span class="version-label">Version</span>
          <span class="version-number">${t.version}</span>
        </div>
      `}catch(t){console.error("Failed to load version info:",t)}}async loadStorageStats(){var t,s;try{const e=await n.runtime.sendMessage({type:"GET_STORAGE"}),a=((t=e.captures)==null?void 0:t.length)||0,o=((s=e.captures)==null?void 0:s.filter(c=>c.synced).length)||0,l=a-o,r=(JSON.stringify(e).length/1024/1024).toFixed(2);this.elements.storageStats.innerHTML=`
        <div class="stats-grid">
          <div class="stat-item">
            <span class="stat-number">${a}</span>
            <span class="stat-label">Total Captures</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">${o}</span>
            <span class="stat-label">Synced</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">${l}</span>
            <span class="stat-label">Pending</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">${r} MB</span>
            <span class="stat-label">Storage Used</span>
          </div>
        </div>
      `}catch(e){console.error("Failed to load storage stats:",e),this.elements.storageStats.innerHTML='<p class="error">Failed to load storage statistics</p>'}}async loadAccountStatus(){try{this.elements.accountStatus.innerHTML=`
          <div class="account-disconnected">
            <span class="status-icon">⚠️</span>
            <div class="status-info">
              <strong>Not Connected</strong>
              <p>Connect your CATHCR account to sync across devices</p>
            </div>
          </div>
        `,this.elements.connectAccountBtn.textContent="Connect Account"}catch(t){console.error("Failed to load account status:",t)}}async handleOpenShortcuts(){try{await n.tabs.create({url:"chrome://extensions/shortcuts"})}catch(t){console.error("Failed to open shortcuts:",t),this.showToast("Failed to open shortcuts settings","error")}}async handleExportData(){try{const t=await n.runtime.sendMessage({type:"GET_STORAGE"}),s={version:n.runtime.getManifest().version,exportDate:new Date().toISOString(),captures:t.captures||[],settings:t.userSettings||{}},e=new Blob([JSON.stringify(s,null,2)],{type:"application/json"}),a=URL.createObjectURL(e),o=document.createElement("a");o.href=a,o.download=`cathcr-backup-${new Date().toISOString().split("T")[0]}.json`,o.click(),URL.revokeObjectURL(a),this.showToast("Data exported successfully","success")}catch(t){console.error("Failed to export data:",t),this.showToast("Failed to export data","error")}}async handleCleanup(){this.showModal("Cleanup Old Data","This will remove old synced captures to free up space. Unsynced captures will be preserved.",async()=>{try{await n.runtime.sendMessage({type:"CLEANUP_STORAGE"}),this.showToast("Storage cleanup completed","success"),await this.loadStorageStats()}catch(t){console.error("Failed to cleanup storage:",t),this.showToast("Failed to cleanup storage","error")}})}async handleClearAll(){this.showModal("Clear All Data","⚠️ This will permanently delete ALL your captures and settings. This action cannot be undone!",async()=>{try{await n.runtime.sendMessage({type:"CLEAR_ALL_DATA"}),this.showToast("All data cleared","success"),await this.loadSettings(),await this.loadStorageStats()}catch(t){console.error("Failed to clear data:",t),this.showToast("Failed to clear data","error")}},"danger")}async handleConnectAccount(){try{await n.tabs.create({url:"https://cathcr.com/connect-extension"})}catch(t){console.error("Failed to open connection page:",t),this.showToast("Failed to open connection page","error")}}async handleOpenDashboard(){try{await n.tabs.create({url:"https://cathcr.com"})}catch(t){console.error("Failed to open dashboard:",t),this.showToast("Failed to open dashboard","error")}}async handleResetSettings(){this.showModal("Reset Settings","This will reset all settings to their default values.",async()=>{try{this.settings={syncEnabled:!0,autoCapture:!0,notifications:!0,analyticsEnabled:!1},await this.saveSettings(),await this.loadSettings(),this.showToast("Settings reset to defaults","success")}catch(t){console.error("Failed to reset settings:",t),this.showToast("Failed to reset settings","error")}})}showModal(t,s,e,a="default"){this.elements.modalTitle.textContent=t,this.elements.modalMessage.textContent=s,this.elements.modalConfirm.className=`btn btn-${a==="danger"?"danger":"primary"}`,this.elements.modalConfirm.onclick=async()=>{this.hideModal(),await e()},this.elements.modalOverlay.style.display="flex"}hideModal(){this.elements.modalOverlay.style.display="none"}showToast(t,s){const e=document.createElement("div");e.className=`toast toast-${s}`,e.textContent=t,this.elements.toastContainer.appendChild(e),requestAnimationFrame(()=>{e.classList.add("toast-visible")}),setTimeout(()=>{e.classList.remove("toast-visible"),setTimeout(()=>e.remove(),200)},4e3)}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>new i):new i;
