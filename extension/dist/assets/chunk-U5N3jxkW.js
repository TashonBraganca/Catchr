import{b as i}from"./chunk-DX5UB71L.js";class u{constructor(){this.STORAGE_KEYS={CAPTURES:"cathcr_captures",SYNC_QUEUE:"cathcr_sync_queue",SYNC_STATUS:"cathcr_sync_status",USER_SETTINGS:"cathcr_user_settings",LAST_SYNC:"cathcr_last_sync"},this.MAX_CAPTURES=1e3,this.CLEANUP_THRESHOLD=800}async initialize(){try{(await this.getStorageData()).captures||await this.setStorageData({captures:[],syncQueue:[],syncStatus:{isOnline:navigator.onLine,lastSync:null},userSettings:{syncEnabled:!0,autoCapture:!0,notifications:!0,analyticsEnabled:!0}}),console.log("✅ Storage initialized")}catch(t){throw console.error("❌ Storage initialization failed:",t),t}}async addCapture(t){const e={id:this.generateId(),timestamp:Date.now(),synced:!1,...t};try{const s=await this.getStorageData();return s.captures=s.captures||[],s.captures.unshift(e),s.captures.length>this.CLEANUP_THRESHOLD&&(s.captures=s.captures.slice(0,this.MAX_CAPTURES)),await this.setStorageData(s),console.log("📝 Capture stored:",e.id),e}catch(s){throw console.error("❌ Failed to add capture:",s),s}}async updateCapture(t,e){try{const s=await this.getStorageData(),a=s.captures.findIndex(n=>n.id===t);return a===-1?(console.warn("Capture not found:",t),null):(s.captures[a]={...s.captures[a],...e},await this.setStorageData(s),console.log("📝 Capture updated:",t),s.captures[a])}catch(s){throw console.error("❌ Failed to update capture:",s),s}}async deleteCapture(t){try{const e=await this.getStorageData(),s=e.captures.length;return e.captures=e.captures.filter(a=>a.id!==t),e.captures.length===s?(console.warn("Capture not found for deletion:",t),!1):(await this.setStorageData(e),console.log("🗑️ Capture deleted:",t),!0)}catch(e){throw console.error("❌ Failed to delete capture:",e),e}}async getCaptures(t){try{const s=(await this.getStorageData()).captures||[];return t?s.slice(0,t):s}catch(e){return console.error("❌ Failed to get captures:",e),[]}}async getUnsyncedCaptures(){try{return(await this.getCaptures()).filter(e=>!e.synced)}catch(t){return console.error("❌ Failed to get unsynced captures:",t),[]}}async markAsSynced(t){try{const e=await this.getStorageData();t.forEach(s=>{const a=e.captures.find(n=>n.id===s);a&&(a.synced=!0,a.syncedAt=Date.now())}),await this.setStorageData(e),console.log("✅ Marked as synced:",t.length,"captures")}catch(e){throw console.error("❌ Failed to mark as synced:",e),e}}async updateSyncStatus(t){try{const e=await this.getStorageData();e.syncStatus={...e.syncStatus,...t},await this.setStorageData(e)}catch(e){console.error("❌ Failed to update sync status:",e)}}async cleanup(){try{const t=await this.getStorageData(),s=t.captures.filter(n=>n.synced).sort((n,r)=>r.timestamp-n.timestamp).slice(0,100),a=t.captures.filter(n=>!n.synced);t.captures=[...a,...s],await this.setStorageData(t),console.log("🧹 Storage cleanup completed")}catch(t){console.error("❌ Storage cleanup failed:",t)}}async getAll(){return this.getStorageData()}async migrate(t){console.log("🔄 Migrating storage from version:",t);try{t&&this.needsMigration(t)&&await this.performMigration(t)}catch(e){console.error("❌ Migration failed:",e)}}async getStorageData(){const t=await i.storage.local.get([this.STORAGE_KEYS.CAPTURES,this.STORAGE_KEYS.SYNC_QUEUE,this.STORAGE_KEYS.SYNC_STATUS,this.STORAGE_KEYS.USER_SETTINGS]);return{captures:t[this.STORAGE_KEYS.CAPTURES]||[],syncQueue:t[this.STORAGE_KEYS.SYNC_QUEUE]||[],syncStatus:t[this.STORAGE_KEYS.SYNC_STATUS]||{isOnline:navigator.onLine,lastSync:null},userSettings:t[this.STORAGE_KEYS.USER_SETTINGS]||{syncEnabled:!0,autoCapture:!0,notifications:!0}}}async setStorageData(t){const e={};t.captures!==void 0&&(e[this.STORAGE_KEYS.CAPTURES]=t.captures),t.syncQueue!==void 0&&(e[this.STORAGE_KEYS.SYNC_QUEUE]=t.syncQueue),t.syncStatus!==void 0&&(e[this.STORAGE_KEYS.SYNC_STATUS]=t.syncStatus),t.userSettings!==void 0&&(e[this.STORAGE_KEYS.USER_SETTINGS]=t.userSettings),await i.storage.local.set(e)}generateId(){return`cathcr_${Date.now()}_${Math.random().toString(36).substring(2,9)}`}needsMigration(t){return!1}async performMigration(t){console.log("No migration needed for version:",t)}}class h{constructor(){this.API_BASE_URL="https://api.cathcr.com",this.ENDPOINTS={SYNC:"/api/extension/sync",HEALTH:"/api/extension/health",AUTH:"/api/extension/auth",CAPTURES:"/api/extension/captures",CONNECT:"/api/extension/connect"},this.isOnline=navigator.onLine,this.authToken=null}async initialize(){try{window.addEventListener("online",this.handleOnline.bind(this)),window.addEventListener("offline",this.handleOffline.bind(this)),await this.setupPeriodicSync(),this.isOnline&&setTimeout(()=>this.syncNow(),2e3),console.log("🔄 Sync service initialized")}catch(t){console.error("❌ Sync initialization failed:",t)}}async syncNow(){var t;if(!this.isOnline)return{success:!1,error:"Offline - sync will resume when online",synced:0};try{console.log("🔄 Starting sync...");const s=((t=(await this.getStorage()).captures)==null?void 0:t.filter(r=>!r.synced))||[];if(s.length===0)return console.log("✅ No captures to sync"),{success:!0,synced:0};this.authToken||await this.authenticate();const a=10;let n=0;for(let r=0;r<s.length;r+=a){const l=s.slice(r,r+a),c=await this.syncBatch(l);n+=c.length,c.length>0&&await this.markAsSynced(c)}return await this.updateSyncStatus({lastSync:Date.now(),isOnline:!0,error:null}),console.log(`✅ Sync completed: ${n} captures synced`),{success:!0,synced:n}}catch(e){return console.error("❌ Sync failed:",e),await this.updateSyncStatus({isOnline:this.isOnline,error:e instanceof Error?e.message:"Unknown sync error"}),{success:!1,error:e instanceof Error?e.message:"Unknown error",synced:0}}}async queueCapture(t){if(this.isOnline)try{const e=await this.syncBatch([t]);e.length>0&&await this.markAsSynced(e)}catch(e){console.warn("Failed to sync immediately, will retry later:",e)}}async syncOnStartup(){this.isOnline&&setTimeout(()=>this.syncNow(),5e3)}async syncPeriodic(){this.isOnline&&await this.syncNow()}async authenticate(){try{const t=await this.apiRequest(this.ENDPOINTS.AUTH,{method:"POST",body:JSON.stringify({extensionId:i.runtime.id,version:i.runtime.getManifest().version})});if(t.ok){const e=await t.json();this.authToken=e.token,console.log("✅ Extension authenticated")}else throw new Error("Authentication failed")}catch(t){throw console.error("❌ Authentication failed:",t),t}}async syncBatch(t){try{const e=await this.apiRequest(this.ENDPOINTS.SYNC,{method:"POST",headers:{"Content-Type":"application/json",...this.authToken&&{Authorization:`Bearer ${this.authToken}`}},body:JSON.stringify({captures:t.map(a=>({id:a.id,text:a.text,audioUrl:a.audioUrl,context:a.context,timestamp:a.timestamp,source:"extension"}))})});if(!e.ok)throw new Error(`Sync failed: ${e.status} ${e.statusText}`);const s=await e.json();return console.log("📤 Batch synced:",s.synced||t.length,"captures"),t.map(a=>a.id)}catch(e){console.error("❌ Batch sync failed:",e);const s=e instanceof Error?e.message:"Unknown error";throw s.includes("401")||s.includes("403")?(this.authToken=null,new Error("Authentication required")):e}}async setupPeriodicSync(){await i.alarms.clear("sync-periodic"),await i.alarms.create("sync-periodic",{delayInMinutes:5,periodInMinutes:5}),console.log("⏰ Periodic sync scheduled")}async handleOnline(){this.isOnline=!0,console.log("🌐 Connection restored"),await this.updateSyncStatus({isOnline:!0}),setTimeout(()=>this.syncNow(),1e3)}async handleOffline(){this.isOnline=!1,console.log("📴 Connection lost"),await this.updateSyncStatus({isOnline:!1})}async apiRequest(t,e={}){const s=`${this.API_BASE_URL}${t}`,a={headers:{"Content-Type":"application/json","User-Agent":`CATHCR-Extension/${i.runtime.getManifest().version}`},...e};return fetch(s,a)}async getStorage(){const t=await i.storage.local.get(["cathcr_captures","cathcr_sync_status"]);return{captures:t.cathcr_captures||[],syncStatus:t.cathcr_sync_status||{}}}async markAsSynced(t){const e=await this.getStorage();t.forEach(s=>{const a=e.captures.find(n=>n.id===s);a&&(a.synced=!0,a.syncedAt=Date.now())}),await i.storage.local.set({cathcr_captures:e.captures})}async updateSyncStatus(t){const s={...(await this.getStorage()).syncStatus,...t};await i.storage.local.set({cathcr_sync_status:s})}}class d{constructor(){this.MAX_NOTIFICATIONS=5,this.activeNotifications=new Set}async initialize(){try{await this.checkPermissions()||console.warn("⚠️ Notification permission not granted"),i.notifications.onClicked.addListener(this.handleNotificationClick.bind(this)),i.notifications.onClosed.addListener(this.handleNotificationClosed.bind(this)),console.log("🔔 Notifications service initialized")}catch(t){console.error("❌ Failed to initialize notifications:",t)}}async show(t){try{if(!await this.checkPermissions())return console.warn("Cannot show notification: permission denied"),null;if(this.activeNotifications.size>=this.MAX_NOTIFICATIONS){const a=this.activeNotifications.values().next().value;a&&await this.clear(a)}const s=`cathcr_${Date.now()}_${Math.random().toString(36).substring(2,9)}`;return await i.notifications.create(s,{type:t.type,iconUrl:t.iconUrl,title:t.title,message:t.message,imageUrl:t.imageUrl,items:t.items,progress:t.progress,contextMessage:"CATHCR"}),this.activeNotifications.add(s),(!t.buttons||t.buttons.length===0)&&setTimeout(()=>{this.clear(s)},5e3),console.log("🔔 Notification shown:",s),s}catch(e){return console.error("❌ Failed to show notification:",e),null}}async clear(t){try{await i.notifications.clear(t),this.activeNotifications.delete(t)}catch(e){console.error("Failed to clear notification:",e)}}async clearAll(){try{const t=Array.from(this.activeNotifications);await Promise.all(t.map(e=>this.clear(e)))}catch(t){console.error("Failed to clear all notifications:",t)}}async showSuccess(t,e="Success"){return this.show({type:"basic",iconUrl:"/icons/icon-48.png",title:`✅ ${e}`,message:t})}async showError(t,e="Error"){return this.show({type:"basic",iconUrl:"/icons/icon-48.png",title:`❌ ${e}`,message:t})}async showInfo(t,e="Info"){return this.show({type:"basic",iconUrl:"/icons/icon-48.png",title:`ℹ️ ${e}`,message:t})}async showSyncStatus(t,e){if(t===0)return null;const s=t===e?`All ${e} captures synced successfully`:`${t} of ${e} captures synced`;return this.show({type:"basic",iconUrl:"/icons/icon-48.png",title:"🔄 Sync Complete",message:s})}async showQuickCapture(t){const e=t.length>50?t.substring(0,50)+"...":t;return this.show({type:"basic",iconUrl:"/icons/icon-48.png",title:"📝 Thought Captured",message:`"${e}"`})}async checkPermissions(){try{return await i.permissions.contains({permissions:["notifications"]})}catch(t){return console.error("Failed to check notification permissions:",t),!1}}async handleNotificationClick(t){console.log("🔔 Notification clicked:",t);try{t.includes("sync")?await i.action.openPopup():t.includes("capture")&&await i.tabs.create({url:"https://cathcr.com"}),await this.clear(t)}catch(e){console.error("Failed to handle notification click:",e)}}async handleNotificationClosed(t,e){console.log("🔔 Notification closed:",t,"by user:",e),this.activeNotifications.delete(t)}async test(){await this.show({type:"basic",iconUrl:"/icons/icon-48.png",title:"🧪 Test Notification",message:"This is a test notification from CATHCR extension."})}isSupported(){return!!i.notifications}getActiveCount(){return this.activeNotifications.size}async updateBadge(t="",e="#FFA500"){try{await i.action.setBadgeText({text:t}),await i.action.setBadgeBackgroundColor({color:e})}catch(s){console.error("Failed to update badge:",s)}}async clearBadge(){await this.updateBadge("")}async showUnsyncedBadge(t){t>0?await this.updateBadge(t>99?"99+":t.toString(),"#ef4444"):await this.clearBadge()}}class y{constructor(){this.storage=new u,this.sync=new h,this.notifications=new d,console.log("🚀 CATHCR Background Service Worker initialized"),this.initialize()}async initialize(){try{this.setupEventListeners(),await this.storage.initialize(),await this.sync.initialize(),await this.notifications.initialize(),console.log("✅ CATHCR Background Service Worker ready")}catch(t){console.error("❌ Failed to initialize CATHCR background:",t)}}setupEventListeners(){i.commands.onCommand.addListener(this.handleCommand.bind(this)),i.runtime.onMessage.addListener(this.handleMessage.bind(this)),i.tabs.onUpdated.addListener(this.handleTabUpdate.bind(this)),i.runtime.onStartup.addListener(this.handleStartup.bind(this)),i.runtime.onInstalled.addListener(this.handleInstalled.bind(this)),i.alarms.onAlarm.addListener(this.handleAlarm.bind(this))}async handleCommand(t,e){switch(console.log("📝 Command received:",t,e==null?void 0:e.url),t){case"capture-thought":await this.openCaptureModal(e);break;default:console.warn("Unknown command:",t)}}async handleMessage(t,e,s){var a;console.log("💬 Message received:",t.type,(a=e.tab)==null?void 0:a.url);try{let n;switch(t.type){case"CAPTURE_THOUGHT":n=await this.handleCaptureThought(t.payload);break;case"GET_STORAGE":n=await this.storage.getAll();break;case"SYNC_NOW":n=await this.sync.syncNow();break;case"GET_CONTEXT":n=await this.getTabContext(e.tab);break;default:console.warn("Unknown message type:",t.type),n={error:"Unknown message type"}}return s(n),!0}catch(n){console.error("Error handling message:",n);const r=n instanceof Error?n.message:"Unknown error occurred";return s({error:r}),!0}}async openCaptureModal(t){if(!(t!=null&&t.id)){console.warn("No active tab found for capture modal");return}try{await i.scripting.executeScript({target:{tabId:t.id},func:()=>window.CATHCR_INITIALIZED===!0}),await i.tabs.sendMessage(t.id,{type:"OPEN_CAPTURE_MODAL",payload:{url:t.url,title:t.title,timestamp:Date.now()}})}catch(e){console.error("Failed to open capture modal:",e),await this.notifications.show({type:"basic",iconUrl:"/icons/icon-48.png",title:"CATHCR",message:"Unable to capture on this page. Try the extension popup instead."})}}async handleCaptureThought(t){try{const e=await this.storage.addCapture(t);return await this.sync.queueCapture(e),await this.notifications.show({type:"basic",iconUrl:"/icons/icon-48.png",title:"📝 Thought Captured",message:"Your thought has been saved and will sync automatically."}),{success:!0,id:e.id}}catch(e){throw console.error("Failed to capture thought:",e),e}}async getTabContext(t){return t?{url:t.url,title:t.title,favicon:t.favIconUrl,timestamp:Date.now()}:null}async handleTabUpdate(t,e,s){e.status==="complete"&&s.active}async handleStartup(){console.log("🔄 Extension startup"),await this.sync.syncOnStartup()}async handleInstalled(t){console.log("📦 Extension installed/updated:",t.reason),t.reason==="install"?(await this.storage.initialize(),await this.showWelcomeNotification(),i.runtime.openOptionsPage()):t.reason==="update"&&await this.storage.migrate(t.previousVersion)}async handleAlarm(t){switch(console.log("⏰ Alarm triggered:",t.name),t.name){case"sync-periodic":await this.sync.syncPeriodic();break;case"cleanup-storage":await this.storage.cleanup();break}}async showWelcomeNotification(){await this.notifications.show({type:"basic",iconUrl:"/icons/icon-128.png",title:"Welcome to CATHCR! 🎉",message:"Press Cmd+K (or Ctrl+Shift+C) anywhere to capture your thoughts instantly."})}}new y;
