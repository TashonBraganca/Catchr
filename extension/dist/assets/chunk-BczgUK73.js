import"./chunk-B5Qt9EMX.js";import{b as a}from"./chunk-BYVbgdLO.js";class r{constructor(){this.isRecording=!1,this.mediaRecorder=null,this.audioChunks=[],this.elements={thoughtInput:document.getElementById("thoughtInput"),captureForm:document.getElementById("captureForm"),captureBtn:document.getElementById("captureBtn"),voiceBtn:document.getElementById("voiceBtn"),syncBtn:document.getElementById("syncBtn"),optionsBtn:document.getElementById("optionsBtn"),dashboardBtn:document.getElementById("dashboardBtn"),capturesList:document.getElementById("capturesList"),capturesEmpty:document.getElementById("capturesEmpty"),syncStatus:document.getElementById("syncStatus"),statusIndicator:document.getElementById("statusIndicator"),statusText:document.getElementById("statusText"),footerStats:document.getElementById("footerStats"),captureCount:document.getElementById("captureCount"),syncCount:document.getElementById("syncCount"),voiceIndicator:document.getElementById("voiceIndicator"),toastContainer:document.getElementById("toastContainer")},this.initialize()}async initialize(){try{this.setupEventListeners(),await this.loadStorageData(),await this.updateSyncStatus(),console.log("✅ Popup initialized")}catch(t){console.error("❌ Failed to initialize popup:",t),this.showToast("Failed to initialize extension","error")}}setupEventListeners(){this.elements.captureForm.addEventListener("submit",this.handleCaptureSubmit.bind(this)),this.elements.voiceBtn.addEventListener("click",this.handleVoiceToggle.bind(this)),this.elements.syncBtn.addEventListener("click",this.handleSyncNow.bind(this)),this.elements.optionsBtn.addEventListener("click",this.handleOpenOptions.bind(this)),this.elements.dashboardBtn.addEventListener("click",this.handleOpenDashboard.bind(this)),this.elements.thoughtInput.addEventListener("keydown",this.handleKeydown.bind(this)),this.elements.voiceIndicator.addEventListener("click",this.stopVoiceRecording.bind(this))}async handleCaptureSubmit(t){t.preventDefault();const e=this.elements.thoughtInput.value.trim();if(e)try{this.setButtonLoading(this.elements.captureBtn,!0);const s=await this.getCurrentTabContext(),n=await a.runtime.sendMessage({type:"CAPTURE_THOUGHT",payload:{text:e,context:s,source:"popup",timestamp:Date.now()}});if(n.success)this.elements.thoughtInput.value="",this.showToast("Thought captured successfully!","success"),await this.loadStorageData();else throw new Error(n.error||"Failed to capture thought")}catch(s){console.error("Failed to capture thought:",s),this.showToast("Failed to capture thought","error")}finally{this.setButtonLoading(this.elements.captureBtn,!1)}}async handleVoiceToggle(){this.isRecording?this.stopVoiceRecording():await this.startVoiceRecording()}async startVoiceRecording(){try{const t=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaRecorder=new MediaRecorder(t),this.audioChunks=[],this.mediaRecorder.ondataavailable=e=>{this.audioChunks.push(e.data)},this.mediaRecorder.onstop=async()=>{const e=new Blob(this.audioChunks,{type:"audio/wav"});await this.processVoiceRecording(e),t.getTracks().forEach(s=>s.stop())},this.mediaRecorder.start(),this.isRecording=!0,this.elements.voiceBtn.classList.add("recording"),this.elements.voiceIndicator.style.display="flex",this.showToast("Recording started...","info")}catch(t){console.error("Failed to start recording:",t),this.showToast("Microphone access denied","error")}}stopVoiceRecording(){this.mediaRecorder&&this.isRecording&&(this.mediaRecorder.stop(),this.isRecording=!1,this.elements.voiceBtn.classList.remove("recording"),this.elements.voiceIndicator.style.display="none",this.showToast("Processing audio...","info"))}async processVoiceRecording(t){try{const e=new FileReader;e.onloadend=async()=>{const s=e.result,n=await a.runtime.sendMessage({type:"TRANSCRIBE_AUDIO",payload:{audioData:s,source:"popup"}});if(n.success&&n.text)this.elements.thoughtInput.value=n.text,this.elements.thoughtInput.focus(),this.showToast("Audio transcribed successfully!","success");else throw new Error(n.error||"Transcription failed")},e.readAsDataURL(t)}catch(e){console.error("Failed to process audio:",e),this.showToast("Failed to process audio","error")}}async handleSyncNow(){try{this.setButtonLoading(this.elements.syncBtn,!0);const t=await a.runtime.sendMessage({type:"SYNC_NOW"});if(t.success)this.showToast(`Synced ${t.synced} captures`,"success"),await this.loadStorageData(),await this.updateSyncStatus();else throw new Error(t.error||"Sync failed")}catch(t){console.error("Sync failed:",t),this.showToast("Sync failed","error")}finally{this.setButtonLoading(this.elements.syncBtn,!1)}}async handleOpenOptions(){await a.runtime.openOptionsPage(),window.close()}async handleOpenDashboard(){await a.tabs.create({url:"https://cathcr.com"}),window.close()}handleKeydown(t){(t.metaKey||t.ctrlKey)&&t.key==="Enter"&&this.elements.captureForm.dispatchEvent(new Event("submit"))}async loadStorageData(){try{const t=await a.runtime.sendMessage({type:"GET_STORAGE"});this.updateCapturesList(t.captures||[]),this.updateStats(t)}catch(t){console.error("Failed to load storage data:",t)}}updateCapturesList(t){const e=t.slice(0,5);if(e.length===0){this.elements.capturesList.style.display="none",this.elements.capturesEmpty.style.display="block";return}this.elements.capturesList.style.display="block",this.elements.capturesEmpty.style.display="none",this.elements.capturesList.innerHTML=e.map(s=>this.createCaptureItem(s)).join("")}createCaptureItem(t){const e=this.getTimeAgo(t.timestamp),s=t.synced?"✅":"⏳",n=t.text.length>60?t.text.substring(0,60)+"...":t.text;return`
      <div class="capture-item" data-id="${t.id}">
        <div class="capture-content">
          <p class="capture-text">${this.escapeHtml(n)}</p>
          <div class="capture-meta">
            <span class="capture-time">${e}</span>
            <span class="capture-sync" title="${t.synced?"Synced":"Pending sync"}">${s}</span>
          </div>
        </div>
      </div>
    `}updateStats(t){var n,o;const e=((n=t.captures)==null?void 0:n.length)||0,s=((o=t.captures)==null?void 0:o.filter(i=>i.synced).length)||0;this.elements.captureCount.textContent=`${e} capture${e!==1?"s":""}`,this.elements.syncCount.textContent=`${s} synced`}async updateSyncStatus(){try{const e=(await a.runtime.sendMessage({type:"GET_STORAGE"})).syncStatus,s=(e==null?void 0:e.isOnline)??navigator.onLine,n=e==null?void 0:e.lastSync;if(this.elements.statusIndicator.className=`status-indicator ${s?"online":"offline"}`,s)if(n){const o=this.getTimeAgo(n);this.elements.statusText.textContent=`Synced ${o}`}else this.elements.statusText.textContent="Online";else this.elements.statusText.textContent="Offline"}catch(t){console.error("Failed to update sync status:",t),this.elements.statusText.textContent="Unknown"}}async getCurrentTabContext(){try{const e=(await a.tabs.query({active:!0,currentWindow:!0}))[0];return e?{url:e.url,title:e.title,favicon:e.favIconUrl,timestamp:Date.now()}:null}catch(t){return console.error("Failed to get tab context:",t),null}}setButtonLoading(t,e){e?(t.disabled=!0,t.classList.add("loading")):(t.disabled=!1,t.classList.remove("loading"))}showToast(t,e){const s=document.createElement("div");s.className=`toast toast-${e}`,s.textContent=t,this.elements.toastContainer.appendChild(s),requestAnimationFrame(()=>{s.classList.add("toast-visible")}),setTimeout(()=>{s.classList.remove("toast-visible"),setTimeout(()=>s.remove(),200)},3e3)}getTimeAgo(t){const s=Date.now()-t,n=Math.floor(s/6e4),o=Math.floor(s/36e5),i=Math.floor(s/864e5);return i>0?`${i}d ago`:o>0?`${o}h ago`:n>0?`${n}m ago`:"Just now"}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>new r):new r;
